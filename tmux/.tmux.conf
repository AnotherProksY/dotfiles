# Prefix
unbind C-b
set -g prefix2 C-a          # GNU-Screen compatible prefix
bind C-a send-prefix -2

# Binds
bind-key tab last-window   # go to last tab
bind-key e send-prefix
bind-key l send-keys 'C-l'
bind-key k send-keys "clear && tmux clear-history" \; send-keys "Enter"
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# Pane creation
bind - split-window -c "#{pane_current_path}" -v      # split current window horizontally
bind _ split-window -c "#{pane_current_path}" -h      # split current window vertically
bind c new-window -c "#{pane_current_path}"           # create new window

# Pane navigation
bind -n C-h select-pane -L  # move left
bind -n C-j select-pane -D  # move down
bind -n C-k select-pane -U  # move up
bind -n C-l select-pane -R  # move right

# Pane swap
bind > swap-pane -D         # swap current pane with the next one
bind < swap-pane -U         # swap current pane with the previous one

# Pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator

# decide whether we're in a Vim process
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# Copy mode
bind Enter copy-mode        # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# Settings
set -g default-terminal "xterm-256color"
set-window-option -g xterm-keys on
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s focus-events on
set-option -g renumber-windows on

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g base-index 1
setw -g pane-base-index 1
setw -g mode-keys vi

# History
set-option -g history-limit 5000

# Make the status line more pleasant.
set -g status-left ""
set -g status-right ""
set -g status-style bg=default
set -g window-status-current-style fg=green
set -g window-status-style fg=white
set -g window-status-last-style fg=red

# Ensure that everything on the right side of the status line
# is included.
set -g status-right-length 100
set-option -g status-position top
set-window-option -g window-status-separator " | "
set -g status-justify centre
